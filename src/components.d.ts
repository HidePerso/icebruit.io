/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  BruitConfigModel,
} from './models/bruit-config.model';
import {
  Field,
} from './models/field.model';
import {
  EventEmitter,
} from '@stencil/core';
import {
  BruitError,
} from './models/bruit-error.model';


export namespace Components {

  interface BruitModal {
    'config': BruitConfigModel;
    /**
    * field array to add in feedback
    */
    'data': Array<Field>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn': () => Array<Field> | Promise<Array<Field>>;
  }
  interface BruitModalAttributes extends StencilHTMLAttributes {
    'config'?: BruitConfigModel;
    /**
    * field array to add in feedback
    */
    'data'?: Array<Field>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn'?: () => Array<Field> | Promise<Array<Field>>;
    /**
    * emit bruit-error on internal error or config error ex : bruitModal.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent<BruitError>) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'BruitModal': Components.BruitModal;
  }

  interface StencilIntrinsicElements {
    'bruit-modal': Components.BruitModalAttributes;
  }


  interface HTMLBruitModalElement extends Components.BruitModal, HTMLStencilElement {}
  var HTMLBruitModalElement: {
    prototype: HTMLBruitModalElement;
    new (): HTMLBruitModalElement;
  };

  interface HTMLElementTagNameMap {
    'bruit-modal': HTMLBruitModalElement
  }

  interface ElementTagNameMap {
    'bruit-modal': HTMLBruitModalElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
