/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  BrtConfig,
  BrtCoreConfig,
  BrtData,
} from '@bruit/types';
import {
  BruitIoConfig,
} from './models/bruit-io-config.class';
import {
  BrtScreenshot,
} from '@bruit/types/dist/interfaces/brt-screenshot';


export namespace Components {

  interface BruitIo {
    'config': BrtConfig | string;
    /**
    * field array to add in feedback
    */
    'data': Array<BrtData>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn': () => Array<BrtData> | Promise<Array<BrtData>>;
    'setConfig': (conf: string | BrtConfig) => Promise<void>;
    'setData': (datap: BrtData[]) => Promise<void>;
    'setDataFn': (fnp: () => BrtData[] | Promise<BrtData[]>) => Promise<void>;
  }
  interface BruitIoAttributes extends StencilHTMLAttributes {
    'config'?: BrtConfig | string;
    /**
    * field array to add in feedback
    */
    'data'?: Array<BrtData>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn'?: () => Array<BrtData> | Promise<Array<BrtData>>;
    /**
    * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent) => void;
  }

  interface BruitModal {
    'config': BrtCoreConfig | string;
    /**
    * called on click on component init a feedback, wait user submit, send feedback
    */
    'open': (bruitIoConfig: BruitIoConfig, data?: BrtData[], dataFn?: () => BrtData[] | Promise<BrtData[]>) => Promise<void>;
    'sendError': (error: string) => Promise<any>;
    'sendFeedback': (data?: BrtData[], dataFn?: () => BrtData[] | Promise<BrtData[]>, agreement?: boolean, screenshotConfig?: BrtScreenshot) => Promise<any>;
  }
  interface BruitModalAttributes extends StencilHTMLAttributes {
    'config'?: BrtCoreConfig | string;
    /**
    * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent) => void;
  }

  interface BruitRating {
    'color': string;
    'max': number;
    'offColor': string;
    'value': number;
  }
  interface BruitRatingAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'max'?: number;
    'offColor'?: string;
    'onValueChange'?: (event: CustomEvent) => void;
    'value'?: number;
  }
}

declare global {
  interface StencilElementInterfaces {
    'BruitIo': Components.BruitIo;
    'BruitModal': Components.BruitModal;
    'BruitRating': Components.BruitRating;
  }

  interface StencilIntrinsicElements {
    'bruit-io': Components.BruitIoAttributes;
    'bruit-modal': Components.BruitModalAttributes;
    'bruit-rating': Components.BruitRatingAttributes;
  }


  interface HTMLBruitIoElement extends Components.BruitIo, HTMLStencilElement {}
  var HTMLBruitIoElement: {
    prototype: HTMLBruitIoElement;
    new (): HTMLBruitIoElement;
  };

  interface HTMLBruitModalElement extends Components.BruitModal, HTMLStencilElement {}
  var HTMLBruitModalElement: {
    prototype: HTMLBruitModalElement;
    new (): HTMLBruitModalElement;
  };

  interface HTMLBruitRatingElement extends Components.BruitRating, HTMLStencilElement {}
  var HTMLBruitRatingElement: {
    prototype: HTMLBruitRatingElement;
    new (): HTMLBruitRatingElement;
  };

  interface HTMLElementTagNameMap {
    'bruit-io': HTMLBruitIoElement
    'bruit-modal': HTMLBruitModalElement
    'bruit-rating': HTMLBruitRatingElement
  }

  interface ElementTagNameMap {
    'bruit-io': HTMLBruitIoElement;
    'bruit-modal': HTMLBruitModalElement;
    'bruit-rating': HTMLBruitRatingElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
