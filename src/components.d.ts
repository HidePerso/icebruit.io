/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  BrtConfig,
  BrtCoreConfig,
  BrtData,
} from '@bruit/types';
import {
  BruitIoConfig,
} from './models/bruit-io-config.class';

export namespace Components {
  interface BruitCore {
    'config': BrtCoreConfig | string;
    /**
    * called on click on component init a feedback, wait user submit, send feedback
    */
    'newFeedback': (bruitIoConfig: BruitIoConfig, data?: BrtData[], dataFn?: () => BrtData[] | Promise<BrtData[]>) => Promise<void>;
    'sendFeedback': (apiKey: any, agreement: any, data: any, dataFn: any) => Promise<any>;
  }
  interface BruitIo {
    'config': BrtConfig | string;
    /**
    * field array to add in feedback
    */
    'data': Array<BrtData>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn': () => Array<BrtData> | Promise<Array<BrtData>>;
    'start': (brtCoreConfig: BrtCoreConfig) => Promise<void>;
  }
  interface BruitRating {
    'color': string;
    'max': number;
    'offColor': string;
    'value': number;
  }
}

declare global {


  interface HTMLBruitCoreElement extends Components.BruitCore, HTMLStencilElement {}
  var HTMLBruitCoreElement: {
    prototype: HTMLBruitCoreElement;
    new (): HTMLBruitCoreElement;
  };

  interface HTMLBruitIoElement extends Components.BruitIo, HTMLStencilElement {}
  var HTMLBruitIoElement: {
    prototype: HTMLBruitIoElement;
    new (): HTMLBruitIoElement;
  };

  interface HTMLBruitRatingElement extends Components.BruitRating, HTMLStencilElement {}
  var HTMLBruitRatingElement: {
    prototype: HTMLBruitRatingElement;
    new (): HTMLBruitRatingElement;
  };
  interface HTMLElementTagNameMap {
    'bruit-core': HTMLBruitCoreElement;
    'bruit-io': HTMLBruitIoElement;
    'bruit-rating': HTMLBruitRatingElement;
  }
}

declare namespace LocalJSX {
  interface BruitCore extends JSXBase.HTMLAttributes<HTMLBruitCoreElement> {
    'config'?: BrtCoreConfig | string;
    /**
    * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent<any>) => void;
  }
  interface BruitIo extends JSXBase.HTMLAttributes<HTMLBruitIoElement> {
    'config'?: BrtConfig | string;
    /**
    * field array to add in feedback
    */
    'data'?: Array<BrtData>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn'?: () => Array<BrtData> | Promise<Array<BrtData>>;
    /**
    * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent<any>) => void;
    'onOnReady'?: (event: CustomEvent<any>) => void;
  }
  interface BruitRating extends JSXBase.HTMLAttributes<HTMLBruitRatingElement> {
    'color'?: string;
    'max'?: number;
    'offColor'?: string;
    'onValueChange'?: (event: CustomEvent<any>) => void;
    'value'?: number;
  }

  interface IntrinsicElements {
    'bruit-core': BruitCore;
    'bruit-io': BruitIo;
    'bruit-rating': BruitRating;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


