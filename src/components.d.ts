/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  BrtConfig,
} from './models/brt-config.model';
import {
  Field,
} from './models/field.model';
import {
  EventEmitter,
} from '@stencil/core';
import {
  BrtError,
} from './models/brt-error.model';


export namespace Components {

  interface BruitIo {
    'config': BrtConfig;
    /**
    * field array to add in feedback
    */
    'data': Array<Field>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn': () => Array<Field> | Promise<Array<Field>>;
  }
  interface BruitIoAttributes extends StencilHTMLAttributes {
    'config'?: BrtConfig;
    /**
    * field array to add in feedback
    */
    'data'?: Array<Field>;
    /**
    * FN or PROMISE return field array to add in feedback
    */
    'dataFn'?: () => Array<Field> | Promise<Array<Field>>;
    /**
    * emit bruit-error on internal error or config error ex : BruitIo.addEventListener('onError',error=>...)
    */
    'onOnError'?: (event: CustomEvent<BrtError>) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'BruitIo': Components.BruitIo;
  }

  interface StencilIntrinsicElements {
    'bruit-io': Components.BruitIoAttributes;
  }


  interface HTMLBruitIoElement extends Components.BruitIo, HTMLStencilElement {}
  var HTMLBruitIoElement: {
    prototype: HTMLBruitIoElement;
    new (): HTMLBruitIoElement;
  };

  interface HTMLElementTagNameMap {
    'bruit-io': HTMLBruitIoElement
  }

  interface ElementTagNameMap {
    'bruit-io': HTMLBruitIoElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
